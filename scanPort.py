import socket
from datetime import datetime, time
from multiprocessing.dummy import Pool as ThreadPool
import argparse
from sys import flags
from tabnanny import verbose
from termcolor import cprint
from tracemalloc import start
from scapy.all import *
import ipaddress
import nmap
from random import randint
parser = argparse.ArgumentParser()
import re
from functools import partial
parser.add_argument("IP",
                    type=str,
                    help="输入IP",)
parser.add_argument("-p", 
                    dest="port",
                    help="扫描端口(如输入80,445,3306 或者 1-65536).",
                    default="1-65535",
                    action='store')
parser.add_argument("-sT",
                    dest="tcp_st",
                    help="完整的TCP扫描,三次握手.",
                    action='store_true')
parser.add_argument("-sS",
                    dest="tcp_ss",
                    help="隐蔽扫描(半开syn).",
                    action='store_true')
parser.add_argument("-sP",
                    dest="ping",
                    help="ping扫描,发现存活主机",
                    action='store_true')     
args = parser.parse_args()
socket.setdefaulttimeout(0.5) #设置超时为0.5秒
ips = []
ip_ports = []
def parseIP():
    if "/" in args.IP:
        # temp = ipaddress.ip_network(args.IP, strict=False).hosts()
        # 192.168.33.0/24
        # \D+\.+\D+\.+\D+\.
        ipElem = re.findall(r"\d*\.\d*\.\d*\.", args.IP.split('/')[0])[0]
        for i in range(1,255):
            ips.append(ipElem+str(i))
        # for ip in temp:
        #     ips.append(temp)
    else:
        ips.append(args.IP)
def getPort():
    ports = []
    if "-" in args.port:
        for i in range(int(args.port.split('-')[0]), int(args.port.split('-')[1])+1):
            ports.append(i)
    else:
        ports = args.port.split(',')
    return ports
def scanPortsT(port):
    ip = ips[0]
    try:
        s = socket.socket(socket.AF_INET,socket.SOCK_STREAM) #AF_INET代表ipv4，SOCK_STREAM代表流式socket，对于发送的是TCP请求
        res = s.connect_ex((ip, port))#连接到address处的套接字，参数为元组格式。有返回值，连接成功时返回0，出错时返回错误编码
        if res == 0: # 如果端口开启
            ip_ports.append(port)
        s.close()#关闭套接字
    except Exception as e:
        return
def scanPing():
    nm = nmap.PortScanner()
    for ipElem in ips:
        try:
            result = nm.scan(hosts=ipElem, arguments='-sP')
            state = result['scan'][ipElem]['status']['state']
            print("{} is {}".format(ipElem, state))
        except Exception  as e:
            pass
def scan_sT(ports):
    t1 = datetime.now()
    for ipElem in ips:
        ip_ports.clear()
        ips[0] = ipElem
        cprint(f'正在扫描IP: {ipElem}', 'cyan')
        pool = ThreadPool(processes = 500) #设置线程池为500
        # portWork = partial(scanPorts, ip=ipElem)
        pool.map(scanPortsT, ports)
        pool.close()
        pool.join()
        for ip_port in ip_ports:
            cprint(f'[+] {ip_port}:OPEN', 'green')
    cprint(f'总共时间：  %s' % (datetime.now() - t1),'cyan')
def scan_sS(ports):
    t1 = datetime.now()
    for ipElem in ips:
        cprint(f'正在扫描IP: {ipElem}', 'cyan')
        for port in ports:
            try:
                ans, unans = sr1(IP(dst=ipElem)/TCP(flags="S", dport=(port)),timeout=1)
                # ans.show()
                ans.summary(lfilter = lambda s,r: r.sprintf("%TCP.flags%") == "SA",prn=lambda s,r: r.sprintf("%TCP.sport% is open"))
            except:
                pass
    cprint(f'总共时间：  %s' % (datetime.now() - t1),'cyan')  
def scanType():
    # 获取指定端口
    ports = getPort()
    # 全连接扫描
    if args.tcp_st:
        scan_sT(ports)
    # 半连接扫描
    if args.tcp_ss:
        scan_sS(ports)
    # 扫描存活主机
    if args.ping:
        scanPing()
if __name__ == '__main__':
    # 获取IP
    parseIP()
    # 扫描
    scanType()
    